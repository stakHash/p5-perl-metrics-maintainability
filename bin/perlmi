#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
use feature qw/say/;
binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';

use Getopt::Long;
use List::AllUtils qw/any nsort_by rev_nsort_by/;
use Perl::Metrics::Maintainability;

exit main() unless caller;

sub main {
    my ($options, @paths) = parse_options(@ARGV);

    my $defined_sort_options = +{
        mi      => 'asc',
        loc     => 'desc',
        cc      => 'desc',
        volume  => 'desc',
    };

    my @sort_keys = keys %$defined_sort_options;
    $options->{sort} //= 'mi';

    unless (any { $options->{sort} eq $_ } @sort_keys) {
        #TODO: display usage
        my $msg = 'undefined sort type (must be ' . join(', ', @sort_keys) . ')';
        die $msg;
    }

    my $analyzer = Perl::Metrics::Maintainability->new(paths => \@paths);
    my $result = $analyzer->analyze();

    return 1 unless defined $result && $result->has_results;

    output($result, $options->{sort}, $defined_sort_options);
    return 0;
}

sub parse_options {
    my (@args) = @_;

    #TODO: display usage
    return undef unless @args;

    my $options = +{};

    unless (Getopt::Long::Parser->new()->getoptionsfromarray(
        \@args,
        $options,
        'sort:s',
    )) {
        #TODO: display usage
        return undef;
    }

    return ($options, @args);

}

sub output {
    my ($result, $sort_type, $defined_sort_options) = @_;
    say $result->sort($sort_type, $defined_sort_options->{$sort_type})->inflate_text;
}
